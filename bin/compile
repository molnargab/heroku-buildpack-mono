#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="3.10.0"
LIBUV_VERSION="1.0.0-rc2"
NODE_VERSION="0.11.14"

BUILD_DIR=$1
CACHE_DIR=$2
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "-----> Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

SRC_DIR=`mktemp -d`
# Move the app source code into temporary src dir
mv ${BUILD_DIR}/* ${SRC_DIR}/.

mkdir -p ${CACHE_DIR}

MONO_CACHE_LOCATION=${CACHE_DIR}/$STACK/mono-${MONO_VERSION}
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

# Copy mono from cache to where we're building the slug
cp -r ${MONO_CACHE_LOCATION}/mono ${BUILD_DIR}/.
# Mono expects to be running out of /app
ln -s ${BUILD_DIR}/mono /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

# Add certs to trust store
cp -r ${BUILDPACK_DIR}/.config ${BUILD_DIR}/.
# Link the certs to make them available to build Mono
ln -s ${BUILD_DIR}/.config ~/.config

# Install Node and grunt-cli
NODE_CACHE_LOCATION=${CACHE_DIR}/${STACK}/node-${NODE_VERSION}
conditional_download http://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz ${NODE_CACHE_LOCATION}
export PATH="${NODE_CACHE_LOCATION}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
if ! hash grunt 2>/dev/null; then
    npm install -g grunt-cli
fi

# Install KRE
export KRE_VERSION="1.0.0-beta1"
export KRE_USER_HOME=${CACHE_DIR}/kre
source <(curl -sL https://raw.githubusercontent.com/aspnet/Home/master/kvm.sh)
kvm install $KRE_VERSION -a default

# Add KRE to the build output
cp -r ${KRE_USER_HOME} ${BUILD_DIR}/.

DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/deployment
if [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
    PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
    echo "-----> Project file configured in deployment file"
else
    PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
    printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
    PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "-----> Building ${PROJECT_JSON_FILE}"

KPM_CACHE_LOCATION=${CACHE_DIR}/kpm
echo "-----> Running kpm restore"
kpm restore --packages ${KPM_CACHE_LOCATION}/.kpm/packages ${PROJECT_JSON_FILE}

# Link in the packages dir so that `pack` can find packages 
ln -s ${KPM_CACHE_LOCATION}/.kpm ~/.kpm

echo "-----> Running kpm pack"
kpm pack --out ${BUILD_DIR} --no-source ${PROJECT_JSON_FILE}

# TODO: This is not great
# Rename the KRE to `default` so that we know where it's at
KRE=$(kvm alias default)
rm -rf ${BUILD_DIR}/kre/packages/default
mv ${BUILD_DIR}/kre/packages/${KRE} ${BUILD_DIR}/kre/packages/default

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

LIBUV_CACHE_PATH=${CACHE_DIR}/${STACK}/libuv
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/libuv-${LIBUV_VERSION}.tar.gz ${LIBUV_CACHE_PATH}
cp -r ${LIBUV_CACHE_PATH}/libuv ${BUILD_DIR}/.

NGINX_CACHE_PATH=${CACHE_DIR}/${STACK}/nginx
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/nginx.tar.gz ${NGINX_CACHE_PATH}

mkdir -p ${BUILD_DIR}/nginx
cp ${NGINX_CACHE_PATH}/nginx ${BUILD_DIR}/nginx/.
# Copy nginx configuration from buildpack dir
cp ${BUILDPACK_DIR}/nginx/* ${BUILD_DIR}/nginx/.

if [ -e ${SRC_DIR}/Procfile ]; then
    cp ${SRC_DIR}/Procfile ${BUILD_DIR}
fi
